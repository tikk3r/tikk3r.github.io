(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: main, setup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setup\", function() { return setup; });\n/* harmony import */ var wasm_demo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-demo */ \"../pkg/wasm_demo.js\");\n// Code examples used:\n// https://github.com/travisdoesmath/n-pendulum-wasm/\n// https://d3fc.io/examples/chart-d3fc-zoom/\n// https://blog.scottlogic.com/2020/05/01/rendering-one-million-points-with-d3.html\n//\n// If you only use `npm` you can simply\n// import { Chart } from \"wasm-demo\" and remove `setup` call from `bootstrap.js`.\nclass Chart {}\n\n\nconst array_selector = document.getElementById(\"array_selector\");\n\nconst phi = document.getElementById(\"phi\");\nconst duration = document.getElementById(\"duration\");\nconst frequency = document.getElementById(\"frequency\");\nconst frequency_channels = document.getElementById(\"frequency_channels\");\nconst declination = document.getElementById(\"declination\");\nconst colour_points = document.getElementById(\"checkbox_colour_by_freq\");\nconst reset = document.getElementById(\"btn_reset_sim\");\n\nconst control_uvcov = document.getElementById(\"uvcov-control\");\nconst status = document.getElementById(\"status\");\n\n\nvar antenna_list = {\"LOFAR\": ['CS001HBA0', 'CS001HBA1', 'CS002HBA0', 'CS002HBA1', 'CS003HBA0', 'CS003HBA1', 'CS004HBA0', 'CS004HBA1', 'CS005HBA0', 'CS005HBA1', 'CS006HBA0', 'CS006HBA1', 'CS007HBA0', 'CS007HBA1', 'CS011HBA0', 'CS011HBA1', 'CS013HBA0', 'CS013HBA1', 'CS017HBA0', 'CS017HBA1', 'CS021HBA0', 'CS021HBA1', 'CS024HBA0', 'CS024HBA1', 'CS028HBA0', 'CS028HBA1', 'CS030HBA0', 'CS030HBA1', 'CS031HBA0', 'CS031HBA1', 'CS032HBA0', 'CS032HBA1', 'CS101HBA0', 'CS101HBA1', 'CS103HBA0', 'CS103HBA1', 'CS201HBA0', 'CS201HBA1', 'CS301HBA0', 'CS301HBA1', 'CS302HBA0', 'CS302HBA1', 'CS401HBA0', 'CS401HBA1', 'CS501HBA0', 'CS501HBA1', 'RS106HBA', 'RS205HBA', 'RS208HBA', 'RS210HBA', 'RS305HBA', 'RS306HBA', 'RS307HBA', 'RS310HBA', 'RS406HBA', 'RS407HBA', 'RS409HBA', 'RS503HBA', 'RS508HBA', 'RS509HBA', 'DE601HBA', 'DE602HBA', 'DE603HBA', 'DE604HBA', 'DE605HBA', 'FR606HBA', 'SE607HBA', 'UK608HBA', 'DE609HBA', 'PL610HBA', 'PL611HBA', 'PL612HBA', 'IE613HBA', 'LV614HBA', \"BG\", \"IT\", \"GMRT\"].sort(),\n    \"e-MERLIN\": [\"Lovell\", \"MarkII\", \"Defford\", \"Knockin\", \"Pickmere\", \"Darnhall\", \"Cambridge\"].sort(),\n    \"LAMBDA\": [\"Ceduna\",\"Parkes\",\"Narrabri\",\"Hobart\",\"Perth\"].sort(),\n    \"Test\": [\"PL611HBA\", \"IE613HBA\"].sort()};\n\n/** Add event listeners. */\nfunction setupUI() {\n    status.innerText = \"WebAssembly loaded!\";\n\tphi.addEventListener(\"change\", updatePlot);\n\tphi.addEventListener(\"input\", updatePlot);\n\tduration.addEventListener(\"change\", updatePlot);\n\tduration.addEventListener(\"input\", updatePlot);\n\tfrequency.addEventListener(\"change\", updatePlot);\n\tfrequency.addEventListener(\"input\", updatePlot);\n\tfrequency_channels.addEventListener(\"change\", updatePlot);\n\tfrequency_channels.addEventListener(\"input\", updatePlot);\n\ttime_channels.addEventListener(\"change\", updatePlot);\n\ttime_channels.addEventListener(\"input\", updatePlot);\n\tdeclination.addEventListener(\"change\", updatePlot);\n\tdeclination.addEventListener(\"input\", updatePlot);\n\tarray_selector.addEventListener(\"input\", updateAntennas);\n\tarray_selector.addEventListener(\"change\", updateAntennas);\n    antennas = document.getElementById(\"antennas\");\n\n    colour_points.addEventListener(\"change\", updatePlot);\n    reset.addEventListener(\"click\", resetSliders);\n\n    updateAntennas();\n}\n\nfunction resetSliders() {\n    console.log(\"Resetting\");\n    declination.value = 58;\n    duration.value = 480;\n    phi.value = 120;\n    time_channels.value = 3;\n    frequency.value = 144;\n    frequency_channels.value = 1;\n    updatePlot();\n}\n\nvar data = []\n\nconst x = d3.scaleLinear().domain([-1250e3, 1250e3]);\nconst y = d3.scaleLinear().domain([-1250e3, 1250e3]);\n\nconst pointSeries = fc\n    .seriesWebglPoint()\n    .equals((previousData, currentData) => previousData === currentData)\n    .crossValue(d => d.x)\n    .mainValue(d => d.y)\n    .size(10);\n\n// create a d3fc-zoom that handles the mouse / touch interactions\nconst zoom = fc.zoom().on('zoom', render);\n\nconst gridline = fc.annotationCanvasGridline().xTicks(20).yTicks(20);\n\n\nconst axis = fc\n    .axisBottom(x)\n    .decorate(sel => {\n        sel.enter()\n            .append('text')\n    .attr('fill', 'red');\n    });\n\n// the chart!\nconst chart = fc\n    .chartCartesian(x, y)\n    .canvasPlotArea(gridline)\n    .webglPlotArea(pointSeries)\n    .xLabel(\"u [λ]\")\n    .yLabel(\"v [λ]\")\n    .decorate(sel => {\n        // add the zoom interaction on the enter selection\n        // use selectAll to avoid interfering with the existing data joins\n        sel.enter()\n            .selectAll('.plot-area')\n            .call(zoom, x, y);\n        sel.enter()\n            .selectAll('.x-axis')\n            .call(zoom, x, null);\n        sel.enter()\n            .selectAll('.y-axis')\n            .call(zoom, null, y);\n    })\n    .xDecorate( sel => {\n        sel.select('text')\n        .attr('transform', 'rotate(-25) translate(0 25)')\n        .style('font-size', '16px')\n        .style('font-family', 'Spectral');\n    })\n    .yDecorate( sel => {\n        sel.select('text')\n        //.attr('transform', 'rotate(-45 35 15)')\n        .style('font-size', '16px')\n        .style('font-family', 'Spectral')\n    });\n\nconst webglColor = color => {\n  const { r, g, b, opacity } = d3.color(color).rgb();\n  return [r / 255, g / 255, b / 255, opacity];\n};\n\nfunction render() {\n    d3.select('#chart')\n        .style(\"font-size\", \"32px\")\n        .style(\"font-family\", \"Spectral\")\n        .datum(data)\n        .call(chart);\n}\n\n/** Main entry point */\nfunction main() {\n    setupUI();\n}\n\n/** This function is used in `bootstrap.js` to setup imports. */\nfunction setup(WasmChart) {\n    Chart = WasmChart;\n}\n\nfunction toggleButtonsCore() {\n    const array = document.querySelector(\"input[name=array]:checked\");\n    let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n\n    for (var i = 0; i < antenna_list[telescope].length; i++) {\n        let ant = antenna_list[telescope][i];\n        if (ant.includes(\"CS\")) {\n            let checkbox = document.getElementById(ant);\n            checkbox.checked = !checkbox.checked;\n        }\n    }\n    updatePlot();\n}\n\nfunction toggleButtonsRemote() {\n    const array = document.querySelector(\"input[name=array]:checked\");\n    let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n\n    for (var i = 0; i < antenna_list[telescope].length; i++) {\n        let ant = antenna_list[telescope][i];\n        if (ant.includes(\"RS\")) {\n            let checkbox = document.getElementById(ant);\n            checkbox.checked = !checkbox.checked;\n        }\n    }\n    updatePlot();\n}\n\nfunction toggleButtonsIntl() {\n    const array = document.querySelector(\"input[name=array]:checked\");\n    let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n\n    for (var i = 0; i < antenna_list[telescope].length; i++) {\n        let ant = antenna_list[telescope][i];\n        if (!ant.includes(\"CS\") && !ant.includes(\"RS\") && !ant.includes(\"BG\") && !ant.includes(\"IT\") && !ant.includes(\"GMRT\")) {\n            let checkbox = document.getElementById(ant);\n            checkbox.checked = !checkbox.checked;\n        }\n    }\n    updatePlot();\n}\n\nfunction updateAntennas() {\n    const array = document.querySelector(\"input[name=array]:checked\");\n    let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n\n    antennas.innerHTML = '';\n    let leg = document.createElement(\"legend\");\n    leg.innerHTML = \"Antennas\";\n    antennas.appendChild(leg);\n    \n    if (telescope == \"LOFAR\") {\n        let btn_core = document.createElement(\"input\");\n        btn_core.type = \"button\";\n        btn_core.id = \"btn_lofar_core\";\n        btn_core.value = \"Toggle\\nCS\"\n        btn_core.classList.add(\"button\");\n        btn_core.addEventListener('click', toggleButtonsCore);\n\n        let btn_remote = document.createElement(\"input\");\n        btn_remote.type = \"button\";\n        btn_remote.id = \"btn_lofar_remote\";\n        btn_remote.value = \"Toggle\\nRS\"\n        btn_remote.classList.add(\"button\");\n        btn_remote.addEventListener('click', toggleButtonsRemote);\n\n        let btn_intl = document.createElement(\"input\");\n        btn_intl.type = \"button\";\n        btn_intl.id = \"btn_lofar_intl\";\n        btn_intl.value = \"Toggle\\nIntl.\"\n        btn_intl.classList.add(\"button\");\n        btn_intl.addEventListener('click', toggleButtonsIntl);\n\n        antennas.appendChild(btn_core);\n        antennas.appendChild(btn_remote);\n        antennas.appendChild(btn_intl);\n        antennas.appendChild(document.createElement(\"br\"));\n        antennas.appendChild(document.createElement(\"br\"));\n    }\n\n    let cblist = document.createElement(\"ul\");\n    cblist.id = \"checkboxlist\";\n    for (var i = 0; i < antenna_list[telescope].length; i++) {\n        let ant = antenna_list[telescope][i];\n\n        let li = document.createElement(\"li\");\n\n        let checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.name = ant;\n        checkbox.id = ant;\n        checkbox.value = `include_${ant}`;\n        if (ant.includes(\"CS\") || ant.includes(\"BG\") || ant.includes(\"IT\") || ant.includes(\"GMRT\")) {\n            checkbox.checked = false;\n        } else {\n            checkbox.checked = true;\n        }\n        checkbox.addEventListener('change', updatePlot);\n\n        let label= document.createElement(\"label\");\n        label.appendChild(checkbox);\n\n        let description = document.createTextNode(ant);\n        label.appendChild(description);\n\n        li.appendChild(label);\n        cblist.appendChild(li);\n\n\n        //if ((i > 0) && (i % 2 == 1)) {\n        //    antennas.appendChild(document.createElement(\"br\"));\n        //}\n    }\n    antennas.appendChild(cblist);\n    updatePlot();\n}\n\nfunction updatePlotUvCoverage() {\n\tlet phi_value = Number(phi.value) / 60.0 - 6;\n\tlet duration_value = Number(duration.value) / 60.0;\n\tlet t_channels = time_channels.value;\n    const TSLOT_LIMIT = 20;\n    if (t_channels > duration_value * TSLOT_LIMIT) {\n        t_channels = Math.ceil(duration_value * TSLOT_LIMIT);\n    }\n\tlet freq_value = Number(frequency.value) * 1e6;\n\tlet freq_channels = frequency_channels.value;\n    let dec_value = Number(declination.value) * Math.PI / 180.0;\n\n    const array = document.querySelector(\"input[name=array]:checked\");\n    let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n\n    document.getElementById(\"label_dec\").innerText = `Declination w.r.t. celestial equator: ${(dec_value * 180.0/Math.PI).toFixed(2)} deg`;\n    document.getElementById(\"label_time\").innerText = `Offset from noon: ${(phi_value).toFixed(2)} h`;\n    document.getElementById(\"label_itime\").innerText = `Integration time: ${duration_value.toFixed(2)} h`;\n    document.getElementById(\"label_ntimes\").innerText = `Time samples: ${t_channels}`;\n    document.getElementById(\"label_bandwidth\").innerText = `Frequency channels: ${freq_channels}`;\n    document.getElementById(\"label_freq\").innerText = `Observing frequency: ${freq_value / 1e6} MHz`;\n\n    let antmask = new Uint8Array(antenna_list[telescope].length);\n    for (var i = 0; i < antenna_list[telescope].length; i++) {\n        let ant = antenna_list[telescope][i];\n        let cb = document.getElementById(ant);\n        antmask[i] = cb.checked ? 1 : 0;\n    }\n    for (var i = 0; i < antmask.length; i++) {\n        let ant = antenna_list[telescope][i];\n    }\n\n\tlet uvptr = Chart.plot_interferometer_uvcoverage(dec_value, freq_value, freq_channels, phi_value, duration_value, t_channels, telescope, antmask);\n    var Nant = 0;\n    if (telescope == \"LOFAR\") {\n        Nant = 71;\n    } else if (telescope == \"e-MERLIN\") {\n        Nant = 7;\n    }\n    Nant = antmask.reduce((a, b) => a + b, 0);\n    let Nbaselines = Nant * (Nant - 1) / 2;\n    let Nvalues = ((Nant + Nbaselines)) * freq_channels * t_channels * 2;\n    const memory = Object(wasm_demo__WEBPACK_IMPORTED_MODULE_0__[\"shared_memory\"])();\n    let uv_points = new Float64Array(memory.buffer, uvptr, Nvalues);\n\n    let arr = Array.from(uv_points);\n    let full_uv = arr.flatMap((coord) => [coord, -coord]);\n    let freqs = [];\n    let a = 0;\n    for(a; a<=freq_channels; a++){\n        freqs.push(freq_value + a * 5e6);\n    }\n    data = [];\n    let freq_idx = -1;\n\n    /*\n    // Iterate per 2 because we have u, -u, v, -v in the array.\n    // For every time slot\n    // Nbaselines + Nant antenna points\n    // freq_channels frequency points\n    let t = -1;\n    d3.range(0, uv_points.length+2, 2).forEach(d => {\n        let trem = d % (2 * (((Nbaselines + Nant) * freq_channels)));\n        let frem = d % (2 * (((Nbaselines + Nant))));\n        if (trem == 0) {\n            t += 1;\n            freq_idx = -1;\n        }\n        if (frem == 0) {\n            freq_idx += 1;\n        }\n        data.push({x: uv_points[d], y: uv_points[d+1], freq: freqs[freq_idx]});\n        data.push({x: -uv_points[d], y: -uv_points[d+1], freq: freqs[freq_idx]});\n    });\n    */\n    d3.range(0, uv_points.length, 2).forEach(i => {\n        freq_idx = (i % (2 * freq_channels)) / 2;\n        data.push({x: uv_points[i], y: uv_points[i+1], freq: freqs[freq_idx]});\n        data.push({x: -uv_points[i], y: -uv_points[i+1], freq: freqs[freq_idx]});\n    });\n\n    if (colour_points.checked) {\n        const freqColorScale = d3\n          .scaleSequential()\n          //.domain([freq_value + 50e6, freq_value])\n          .domain([freq_value, freq_value + 50e6])\n          .interpolator(d3.interpolateSpectral);\n          //.interpolator(d3.interpolateYlGnBu);\n          //.interpolator(d3.interpolateRdYlGn);\n\n        let fillColor = fc\n          .webglFillColor()\n          .value(d => webglColor(freqColorScale(d.freq)))\n          .data(data);\n\n        pointSeries.decorate(program => fillColor(program));\n    } else {\n        let fillColor = fc\n          .webglFillColor()\n          .value(d => [0, 0, 0, 1])\n          .data(data);\n\n        pointSeries.decorate(program => fillColor(program));\n    }\n    render();\n    return uv_points.length / 2;\n}\n\nfunction updatePlot() {\n    status.innerText = `Rendering ...`;\n    const start = performance.now();\n    let Npoints = updatePlotUvCoverage();\n    const end = performance.now();\n    if (Npoints) {\n        const array = document.querySelector(\"input[name=array]:checked\");\n        let telescope = document.querySelector(`label[for=${array.id}]`).innerHTML;\n        status.innerText = `UV points rendered: ${Npoints}\\nRender time: ${Math.ceil(end - start)}ms`;\n    } else {\n        status.innerText = `Rendered in ${Math.ceil(end - start)}ms`;\n    }\n}\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);